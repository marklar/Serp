
Currently, newAppleSignal is computing Random numbers every 'interval' (1
second).  But those numbers are being used only when the snake eats the
apple, which will be much less frequently.

Maybe this is no big deal.  Or maybe it's an important inefficiency?

If it does matter, then how can we modify newAppleSignal to 'fire' only
when needed (i.e. when state.apple goes to Nothing)?

Random.range produces a new event only when the input signal
*changes*.  We would need a signal which reports when state.apple goes
to Nothing, using `sampleOn`.



=================
(croppedImage (40,100) 40 80 "trev.png")
(croppedImage (80,60) 130 150 "zoe.png")


=================
TODO: Rather than storing each position,
store only where the vertices (head, tail, and turns) are.

One way to do that is to record (Pos, Dir).
That is:
  1. where the body part is at that moment, and
  2. what direction it came from to get there.

If pushing a new value:
  * whose Dir is different from the previous, simply push.
    You have a new vertex.
  * whose Dir is the same as the previous,
    then you can simply replace the previous with the new one
    (thus extending that segment of the Path).

When removing a value, move it closer by the appropriate amount
to the subsequent.  If doing so makes its Pos equal to or *pass*
the other, then simply remove it.  To see whether it goes past,
look at the subsequent's Dir, and see whether the sign of the
delta in that direction changes.

